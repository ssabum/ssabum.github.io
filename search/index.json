[{"content":"CSS  스타일, 레이아웃 등을 통해 HTML이 사용자에게 어떻게 표시 되는지를 지정하는 언어\n사용자에게 문서(HTML)를 표시하는 방법을 지정하는 언어\n CSS 구문  구문은 선택자와 함께 열린다. 스타일을 지정할 html 요소를 선택. 다음 중괄호가 있는데 이 안에는 속성과 값 쌍 형태를 가지는 하나 또는 그 이상의 선언(declaration)이 있다. 각 쌍은 우리가 선택한 요소의 속성을 지정하고 속성에 부여할 값을 지정한다.  선언문\n 속성 (Property)  사람이 읽을 수 있는 식별자로, 어떤 (글꼴, 너비, 배경색 등) 스타일 기능을 변경할지 나타냅니다.   값 (Value)  각 속성에는 값을 부여한다. 값은 어떻게 (글꼴을 이걸로, 배경 색을 저걸로 등)스타일 기능을 변경할 건지 나타낸다.    CSS 정의 방법\n Inline style 내부 참조 (Embedding style) 외부 참조 (Link style)   CSS Selector  선택자는 스타일을 지정할 웹 페이지의 HTML 요소를 대상으로 하는 데 사용\n 클래스(class) 선택자\n 클래스 선택자는 마침표( .) 문자로 시작 하며 해당 클래스가 적용된 문서의 모든 항목을 선택  아이디(id) 선택자\n 아이디 선택자는 # 문자로 시작하며 기본적으로 클래스 선택자와 같은 방식으로 사용 그러나 아이디는 문서 당 한 번만 사용할 수 있으며 요소에는 단일 id값만 적용 할 수 있다 문서에서 동일한 아이디를 여러 번 사용해도 동작하나 그렇게 하면 안된다.  결합자(combinators)\n 자손 결합자  셀렉터A  (공백) 셀렉터B 셀렉터A의 모든 후손 요소(level n) 중 셀렉터B와 일치하는 요소 선택   자식 결합자  셀렉터A \u0026gt; 셀렉터B 셀렉터A의 모든 자식 요소(level 1) 중 셀렉터B와 일치하는 요소 선택   일반 형제 결합자  셀렉터A ~ 셀렉터B 셀렉터A의 형제 요소 중 셀렉터A 뒤에 위치하는 셀렉터B 요소를 모두 선택   인접 형제 결합자  셀렉터A + 셀렉터B 셀렉터A의 형제 요소 중 셀렉터A 바로 뒤에 위치하는 셀렉터B 요소를 선택 단, A와 B 사이에 다른 요소가 존재하면 선택되지 않음    적용 우선순위\n !important  다른 사람들의 코드에서 발견할 때 그 의미를 알 수 있는 것은 좋다. 하지만 반드시 필요한 경우가 아니면 절대 사용하지 않는 것이 좋다., !important 는 cascading이 정상적으로 작동하는 방식을 변경하므로, CSS 스타일 문제를 해결하기가 어렵습니다.   inline style id 선택자  id는 대부분의 다른 선택자보다 우선순위가 높기 때문에 다루기가 어려워 질 수 있다. 대부분의 경우 id 보다는 모두 class 선택자로 작성하는 것이 좋다. 만약 문서 내 링크 이동이나 for를 사용하는 특별한 경우에만 아이디를 사용한다.   class 선택자 요소 선택자 소스 순서   CSS 단위 (상대) 크기 단위\npx\n 모니터 해상도의 한 화소인 \u0026lsquo;픽셀\u0026rsquo;을 기준 픽셀의 크기는 변하지 않기 때문에 고정적인 단위  %\n 백분율 단위 가변적인 레이아웃에서 자주 사용  em\n em은 상속의 영향 받음, rem은 최상위 요소(html)를 기준으로 결정됨. 상황에 따라 각기 다른 값을 가질 수 있다.  rem\n 최상위 요소인 html(root em)을 절대 단위를 기준으로 삼음. 상속의 영향을 받지 않음. 상속에 영향을 받지 않기 때문에 대부분의 경우 rem 을 많이 사용한다.  viewport\n (스크롤을 내리지 않은 상태에서) 웹 페이지를 방문한 유저에게 현재 보이는 웹 컨텐츠의 영역 viewport를 기준으로한 상대적인 사이즈 주로 스마트폰이나 테블릿 디바이스의 화면을 일컫는 용어로 사용된다. vw, vh  색상 표현 단위\n 색상 키워드  색상 키워드는 대소문자를 구분하지 않는 식별자로, red, blue, black처럼 특정 색을 나타낸다   RGB 색상  빨강, 초록, 파랑을 통해 특정 색을 표현 16진수 표기법이나 함수형 표기법으로 사용 a는 alpha(투명도)가 추가된 것   HSL 색상  색상, 채도, 명도를 통해 특정 색상을 표현 a는 alpha(투명도)가 추가된 것     Box Model  웹 디자인은 contents를 담을 box model을 정의하고 CSS 속성을 통해 스타일(배경, 폰트와 텍스트 등)과 위치 및 정렬을 지정하는 것.\n  모든 HTML 요소는 box 형태로 되어있다. 하나의 박스는 네 부분(영역)으로 이루어 진다.  content / padding / border / margin     Content  글이나 이미지, 비디오 등 요소의 실제 내용   Padding (안쪽 여백)  Border(테두리) 안쪽의 내부 여백 배경색, 이미지 지정 가능   Border Margin (바깥쪽 여백)  테두리 바깥의 외부 여백 배경색 지정 불가    마진 상쇄\n block의 top 및 bottom margin이 때로는 (결합되는 마진 중 크기가) 가장 큰 한 마진으로 결합(combine, 상쇄(collapsed))된다.   Display  display CSS 속성은 요소를 블록과 인라인 요소 중 어느 쪽으로 처리할지와 함께 자식 요소를 배치할 때 사용할 레이아웃을 설정한다.\n block\n 쌓이는 박스 요소는 블록 요소 상자를 생성하여 일반 흐름에서 요소 앞뒤에 줄 바꿈을 생성한다. 블록 레벨 요소안에 인라인 레벨 요소가 들어갈 수 있다.  inline\n 줄바꿈이 일어나지 않는 행의 일부 요소 content 너비만큼 가로 폭을 차지 width, height, margin-top, margin-bottom을 지정할 수 없음 상하 여백은 line-height로 지정  inline-block\n inline 처럼 텍스트 흐름대로 나열, block처럼 박스 형태이기 block 속성 사용가능  none\n 해당 요소를 화면에서 사라지게 하며 요소의 공간조차 사라지게 한다. visibility: hidden;은 해당 요소를 화면에서 사라지게는 하나 공간은 사라지지 않는다.   Position 박스의 위치 속성 \u0026amp; 값\n position  static / absolute / relative / fixed z-index    기본 개념\n static (기본 위치)  모든 태그의 기본 태그의 default 값   relative (상대 위치)  기본 위치(static)를 기준으로 좌표 속성을 사용해 위치 이동   absolute (절대 위치)  static 이 아닌 부모/조상 요소를 기준으로 좌표 속성 만큼 이동 부모 요소를 찾아가고 나아가 없다면 body에 붙는다.   fixed (고정 위치)  부모/조상 요소와 관계없이 브라우저의 viewport를 기준으로 좌표 속성 만큼 이동 스크롤을 내리거나 올려도 화면에서 사라지지 않고 항상 같은 곳에 위치    absolute\n absolute는 원래 위치해 있었던 과거 위치에 있던 공간은 더 이상 존재하지 않는다는 점이 특징이다. 즉, 다른 모든 것과는 별개로 독자적인 곳에 놓이게 된다. 대체 언제 쓸까?  페이지의 다른 요소의 위치와 간섭하지 않는 격리된 사용자 인터페이스 기능을 만들 수 있다. 팝업 정보 상자 및 제어 메뉴, 롤오버 패널, 페이지 어느 곳에서나 끌어서 놓기할 수 있는 유저 인터페이스 페이지 등     참고문헌 https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\nhttps://developer.mozilla.org/ko/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\nhttps://developer.mozilla.org/ko/docs/Web/CSS/inheritance\nhttps://developer.mozilla.org/ko/docs/Web/HTML/Block-level_elements\nhttps://developer.mozilla.org/ko/docs/Web/HTML/Inline_elements\nhttps://developer.mozilla.org/ko/docs/Web/CSS/display\nhttps://docs.emmet.io/cheat-sheet/\n","date":"2021-03-26T00:00:00Z","image":"https://ssabum.github.io/p/css%EA%B8%B0%EC%B4%88/css_hu42497fb400a464be61c8fe27b05f0811_45708_120x120_fill_box_smart1_2.png","permalink":"https://ssabum.github.io/p/css%EA%B8%B0%EC%B4%88/","title":"CSS기초"},{"content":"CSS Layout  웹페이지에 포함되는 요소들을 어떻게 취합하고 그것들이 어느 위치에 놓일 것인지를 제어한다.\n float  한 요소(element)가 정상 흐름(normal flow)으로부터 빠져 텍스트 및 인라인(inline) 요소가 그 주위를 감싸 자기 컨테이너의 좌,우측을 따라 배치되어야 함을 지정한다.\n clearfix\n  float 요소와 다른 텍스트가아닌 block 요소간의 레이아웃 깨짐을 막기 위해 다음과 같이 작성한다.\n/* float 속성을 적용한 요소의 부모요소에 적용한다. */ /* 부모 태그 다음에 가상 요소(::after)로 내용이 빈(content:\u0026#34;\u0026#34;) 블럭(display: block;)을 만들고 */ /* 이 가상요소는 float left,right(both)를 초기화 한다는 뜻 */ .clearfix::after { content: \u0026#34;\u0026#34;; display: block; clear: both; }   정리\n flexbox 및 그리드 레이아웃과 같은 기술이 나오기 이전에 float는 열 레이아웃을 만드는데 사용되었다. mdn에서는 더 새롭고 나은 레이아웃 기술이 나와있으므로 레거시 레이아웃 기술로 분류해놓기도 했다. 결국 원래 텍스트 블록 내에서 float 이미지를 위한 역할로 돌아간 것이다. 여전히 사용하는 경우도 있다. (ex. naver nav bar)   flexbox  일명 flexbox라 불리는 Flexible Box module은 flexbox 인터페이스 내의 아이템 간 공간 배분과 강력한 정렬 기능을 제공하기 위한 1차원 레이아웃 모델로 설계되었다.\n웹페이지의 컨테이너에 아이템의 폭과 높이 또는 순서를 변경해서 웹페이지의 사용 가능한 공간을 최대한 채우고 이를 디바이스 종류에 따라 유연하게 반영하도록 하는 개념\n 핵심 개념\n 요소  flex container flex items   축  maix axis (주축) cros axis (교차축)    flex container\n flexbox 레이아웃을 형성하는 가장 기본적인 모델 flexbox가 놓여있는 영역 flex 컨테이너를 생성하려면 영역 내의 컨테이너 요소의 display 값을 flex 혹은 inline-flex로 지정 flex 컨테이너를 선언시 아래와 같이 기본 값이 지정  item은 행으로 나열 item은 주축의 시작 선에서 시작 item은 교차축의 크기를 채우기 위해 늘어남 flex-wrap 속성은 nowrap으로 지정    Tip !\rjustify - main axis\ralign - cross axis\rcontent - 여러 줄\ritems - 한 줄\rself - 개별 요소\rflex-direction\n 쌓이는 방향 설정 (main-axis 의 방향만 바뀜. flex 는 single-direction layout concept 이기 때문)\n  row (기본값)  가로로 요소가 쌓임 row 는 주축의 방향을 왼쪽에서 오른쪽으로 흐르게 한다.   row-reverse column  세로로 요소가 쌓임 column 은 주축의 방향을 위에서 아래로 흐르게 한다.   column-reverse  flex-wrap\n item들이 강제로 한 줄에 배치 되게 할 것인지 여부 설정\n  nowrap (기본 값)  모든 아이템들 한 줄에 나타내려고 함 (그래서 자리가 없어도 튀어나옴)   wrap : 넘치면 그 다음 줄로 wrap-reverse : 넘치면 그 윗줄로 (역순)  flex-flow\n flex-direction 과 flex-wrap 의 shorthand\n flex-flow: row nowrap; justify-content\n main axis 정렬\nflex-direction: row 기준으로 작성됨\n  flex-start (기본 값)  시작 지점에서 쌓임(왼쪽 → 오른쪽)   flex-end  쌓이는 방향이 반대 (flex-direction: row-reverse 와는 다르다. 아이템의 순서는 그대로 정렬만 우측에 되는 것.)   center space-between  좌우 정렬 (item 들 간격 동일)   space-around  균등 좌우 정렬 (내부 요소 여백은 외곽 여백의 2배)   space-evenly  균등 정렬 (내부 요소 여백과 외각 여백 모두 동일)    align-items\n cross axis 여러 줄 정렬\nflex-direction: row 기준으로 작성됨\n  stretch (기본 값)  컨테이너를 가득 채움   flex-start  위   flex-end  아래   center baseline  item 내부의 text에 기준선을 맞춤    align-self\n align-items 와 동일 (단, 개별 item 에 적용)\n  auto (기본 값) flex-start flex-end center baseline stretch  부모 컨테이너에 자동으로 맞춰서 늘어난다. (Stretch \u0026lsquo;auto\u0026rsquo;-sized items to fit the container)    order\n 기본 값 : 0 작은 숫자 일수록 앞(왼쪽)으로 이동.  flex-grow\n 기본 값 : 0 주축에서 남는 공간을 항목들에게 분배하는 방법 각 아이템의 상대적 비율을 정하는 것이 아님 음수는 불가능   Bootstrap  The most popular HTML, CSS, and JS library in the world.\n   트위터에서 시작된 오픈 소스 프론트엔드 라이브러리\n  웹 페이지에서 많이 쓰이는 요소를 거의 전부 내장하고 있다.\n  디자인을 할 시간이 크게 줄어들고, 여러 웹 브라우저를 지원하기 위한 크로스 브라우징에 골머리를 썩일 필요가 없다.\n  웹 브라우저 크기에 따라 자동으로 정렬되는 \u0026ldquo;그리드 시스템\u0026quot;을 지원하며,\n  \u0026ldquo;one souce multi use\u0026rdquo; → 반응형 웹 디자인을 추구한다.\n  Responsive web design\n layout은 방문자의 화면 해상도를 고려하여야 한다. 스마트폰이나 태블릿 등 모바일 기기는 화면이 작기 때문에 가독성에 더욱 신경써야 한다. 보통 웹사이트가 축소되어 가로 스크롤 없이 콘텐츠를 볼 수 있으나 글자가 너무 작아지기 때문이다. 데스크탑용, 테블릿용, 모바일용 웹사이트를 별도 구축할 수도 있지만 One Source Multi Use의 관점에서 올바른 해결책은 아니다. 반응형 웹 디자인(Responsive Web Design)은 화면 해상도에 따라 가로폭이나 배치를 변경하여 가독성을 높여 이러한 문제를 해결한다. 즉, 하나의 웹사이트를 구축하여 다양한 디바이스의 화면 해상도에 최적화된 웹사이트를 제공하는 것이다.   Bootstrap Grid System Grid System\n 부트스트랩의 grid system 은 containers, rows 그리고 columns 를 사용해서 컨텐츠를 레이아웃하고 정렬한다. 모바일 우선 flexbox grid 를 사용하여 12개의 column 시스템을 가지고 있다. 왜 12 columns 일까 ?  12는 약수가 가장 많기 때문에 한 줄에 표시할 수 있는 종류가 제일 많다.   다음과 같은 구조로 사용한다.  .container \u0026gt; .row \u0026gt; col-*    .row\n row 는 columns 의 wrapper 이다. 각 column 에는 공간 사이를 제어하기 위한 좌우 padding 값이 있는데 이를 gutter 라고도 한다.  row 의 margin 값과 gutter 를 제거하려면 .row 에 .no-gutters class 를 사용한다.    .col / .col-*\n column class 는 row 당 가능한 12개 중 사용하려는 columns 수를 나타낸다. columns 너비는 백분율로 설정 되므로 항상 부모 요소를 기준으로 유동적으로 크기가 조정된다. grid layout 에서 내용은 반드시 columns 안에 있어야 하며 그리고 오직 columns 만 row 의 바로 하위 자식 일 수 있다.  offset\n offset-* 은 지정한 만큼의 column 공간을 무시하고 다음 공간부터 컨텐츠를 적용한다.  Nesting\n .row \u0026gt; .col-* \u0026gt; .row \u0026gt; .col-* 의 방식으로 중첩 사용 가능하다.  Grid breakpoints\n 부트스트랩 grid system 은 다양한 디바이스에서 적용하기 위해 특정 px 조건에 대한 지점을 정해 두었는데 이를 breakpoints 라고 한다. 부트스트랩은 대부분의 크기를 정의하기 위해 em 또는 rem 을 사용하지만 px 는 그리드 breakpoint 에 사용된다. (뷰포트 너비가 픽셀 단위이고 글꼴 크기에 따라 변하지 않기 때문)   마무리  각각의 기술은 저마다 용도가 있고, 장단점이 있으며, 독립적인 용도를 갖추도록 설계된 기술은 없다.\n특정 상황에 어떤 기술이 가장 적합한 도구가 될 것인지 파악하는 데에는 많은 경험이 필요하다.\n  참고문헌 https://developer.mozilla.org/ko/docs/Learn/CSS/CSS_layout/Introduction\nhttps://developer.mozilla.org/ko/docs/Web/CSS/float\nhttps://developer.mozilla.org/ko/docs/Learn/CSS/CSS_layout/Floats\nhttps://developer.mozilla.org/ko/docs/Learn/CSS/CSS_layout/Flexbox\nhttps://developer.mozilla.org/ko/docs/Web/CSS/CSS_Flexible_Box_Layout/Flexbox%EC%9D%98_%EA%B8%B0%EB%B3%B8_%EA%B0%9C%EB%85%90\nhttps://css-tricks.com/snippets/css/a-guide-to-flexbox/\n","date":"2021-03-26T00:00:00Z","image":"https://ssabum.github.io/p/css%EA%B8%B0%EC%B4%88-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/css_hu42497fb400a464be61c8fe27b05f0811_45708_120x120_fill_box_smart1_2.png","permalink":"https://ssabum.github.io/p/css%EA%B8%B0%EC%B4%88-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/","title":"CSS기초 레이아웃"},{"content":"Django wep programming  파이썬으로 만들어진 무료 오픈소스 웹 애플리케이션 프레임워크\n즉, 쉽고 빠르게 웹사이트를 개발할 수 있도록 돕는 구성요소로 이루어진 웹 프레임워크\n여기서 프레임워크란, 애플리케이션 개발에 바탕이 되는 템플릿과 같은 역할을 하는 클래스들과 인터페이스의 집합\n 기본 생성 파일  mysite: 프로젝트를 담는 공간 manage.py: 프로젝트와 다양한 방법으로 상호작용 하는 커맨드라인의 유틸리티 init.py: 파이썬으로 하여금 이 디렉토리를 패키지처럼 다루라고 알려주는 용도의 빈 파일 setting.py: 현재 프로젝트의 환경 및 구성을 저장 urls.py: 현재 프로젝트의 URL선언을 저장 wsgi.py: 현재 프로젝트를 서비스하기 위한 WSGI 호환 웹 서비의 진입점  django cycle \r\ndjango 명령어 # 프로젝트 생성 $ django-admin startproject 프로젝트명 # 앱 생성 $ python manage.py startapp 앱명 # 서버가 제대로 동작하는지 로컬에서 확인, http://127.0.0.1:8000/에서 출력 $ python manage.py runserver # INSTALLED_APPS 설정을 탐색하여 데이터베이스 생성 $ py manage.py migrate # 데이터베이스에 테이블을 생성할 수 있도록 설계도를 작성 $ py manage.py makemigrations polls # 데이터베이스에 실제 테이블을 생성 $ py manage.py migrate # API를 사용하기 위해 $ py manage.py shell # 생성한 모델을 추가 $ from polls.models import Choice, Question # 관리자 생성 # winpty: windows 콘솔과 통신이 가능한 인터페이스를 제공하는 windows software package $ winpty python manage.py createsuperuser 프로젝트와 앱  앱: 특정한 기능을 수행하는 웹 어플리케이션, 다수의 프로젝트에 포함될 수 있다. 프로젝트: 특정 웹 사이트를 위한 앱들과 각 설정들을 한데 묶어놓은 것, 다수의 앱을 포함할 수 있다.  작동 순서  view 내용 입력 뷰를 호출하기 위한 연결 url 생성을 위해 urls.py 파일 생성 최상위 URLconf에서 생성한 urls.py모듈을 바라보게 설정  이때 include()함수는 다른 URLconf드을 참조할 수 있도록 도움 만약 127.0.0.1/polls/이라는 url을 받으면 파싱을 하여 분기, 해당 path인 polls을 잡아내고 연결을 시켜줌 연결된 urls.py에서 path를 통해 view로 연결 view내부의 함수를 통해 response를 클라이언트에게 전달    데이터베이스 django는 기본적으로 SQLite를 사용하도록 구성되어 있으며, 다른 데이터베이스를 사용하고 싶다면 setting.py파일을 수정해서 사용할 수 있다.\nINSTALLED_APPS django를 사용할 때 기본적으로 딸려 오는 앱으로 추가적으로 모델을 사용하기 위해 추가하면 된다.\n admin: 관리용 사이트 auth: 인증시스템 contenttypes: 컨텐츠 타입을 위한 프레임워크 sessions: 세션 프레임워크 messages: 메세징 프레임워크 staticfiles: 정적 파일을 관리하는 프레임워크  모델 부가적인 메타데이터를 가진 데이터베이스의 구조(layout)를 지칭\n 모델은 데이터에 관한 단 하나의, 가장 확실한 진리의 원천\n이 원칙에 따라 데이터 모델을 한곳에서 정의하고, 이것으로부터 자동으로 뭔가를 유도하는 것이 목표\n API 개발자가 필요로하는 데이터를 뽑아낼 수 있도록 하는 함수, 또는 서버에게 데이터베이스에게 데이터를 입력할 수 있도록 하는 함수\nAdmin 페이지 사이트 관리를 위한 관리자 전용 페이지로 django는 자동으로 제공\nssafy class 중요 urls.py: 주소 관리\nviews.py: 페이지 관리\nmodels.py: 데이터베이스 관리\n실행순서  installed_apps: 앱 등록 project/urls.py: path 등록 app/views.py: 요청 수신/반환 함수 작성 templates/index.html: templates 작성  ","date":"2021-03-26T00:00:00Z","image":"https://ssabum.github.io/p/django-%EA%B8%B0%EB%B3%B8/icon_hu080e9ab032fb83faecb2fd0168b96dc6_15390_120x120_fill_box_smart1_2.png","permalink":"https://ssabum.github.io/p/django-%EA%B8%B0%EB%B3%B8/","title":"Django 기본"},{"content":"HTML  \u0026ldquo;웹 컨텐츠의 의미와 구조를 정의할 때 사용하는 언어\u0026rdquo;\n HTML 기초 Hyper\n 텍스트 등의 정보가 동일 선상에 있는 것이 아니라 다중으로 연결되어 있는 상태  Hyper Text\n 참조(하이퍼링크)를 통해 사용자가 한 문서에서 다른 문서로 즉시 접근 할 수 잇는 텍스트 하이퍼 텍스트가 쓰인 기술등 중 가장 중요한 2가지 (http, html)  Markup Language\n 특정 텍스트에 역할을 부여하는, 따라서 \u0026ldquo;마크업을 한다\u0026rdquo; 라고 하는 건 제목이 제목이라하고 본문이 본문이라고 마킹을 하는 것 ex) h1 tag는 단순히 글자가 커지는 것이 아니라 의미론적으로 그 페이지에서 가장 핵심 주제를 의미하는 것  HTML 기본 구조 DOM\n DOM은 문서의 구조화된 표현(structured representation)을 제공하며 프로그래밍 언어가 DOM 구조에 접근할 수 있는 방법을 제공하여 그들이 문서 구조, 스타일, 내용 등을 변경할 수 있게 도움 DOM은 동일한 문서를 표현하고, 저장하고, 조작하는 방법을 제공 웹 페이지의 객체 지향 표현  요소 (Element)\n HTML 요소는 시작 태그와 종료 태그 그리고 태그 사이에 위치한 내용으로 구성  태그(Element, 요소)는 컨텐츠(내용)를 감싸서 그 정보의 성격과 의미를 정의 한다.   내용이 없는 태그들  br, hr, img, input, link, meta   요소는 중첩(nested)될 수 있다.  이러한 중첩들로 하나의 문서를 완성해 나간다. 그리고 항상 열고 닫는 태그 쌍이 잘 맞는지 잘 봐야한다. HTML은 오류를 뿜지 않고 그냥 레이아웃이 깨져버리기 때문에 어떤 면에서는 친절하게 오류 띄워주고 어디 틀렸는지 알려주는 프로그래밍 보다 디버깅이 힘들다.    속성 (Attribute)\n 속성(Attribute)은 태그의 부가적인 정보가 들어온다. 요소는 속성을 가질 수 있으며 요소에 추가적 정보(이미지 파일의 경로, 크기 등)를 제공한다. 요소의 시작 태그에 위치해야 하며 이름과 값의 쌍을 이룬다. 태그와 상관없이 사용 가능한 속성들(html global attribute)도 있다.  시맨틱 태그  브라우저, 검색엔진, 개발자 모두에게 콘텐츠의 의미를 명확히 설명하는 태그\n 장점\n 읽기 쉬워진다. (개발자)  개발자가 의도한 요소의 의미가 명확히 드러나고 있다.이것은 코드의 가독성을 높이고 유지보수를 쉽게 한다.   접근성이 좋아진다. (검색엔진 및 보조기술 → 시력장애용 스크린리더 → 더 나은 경험 제공)  HTML 문서는 html 언어 + 사람이 읽을 수 있는 content의 조합인데, 검색 엔진은 HTML 코드만 잘 읽는다. 그래서 이 검색 엔진이 HTML을 잘 이해하도록 시맨틱 태그 사용이 권장되고, 그러면 검색 엔진도 무슨 내용인지 이해할 수 있게 된다.    시맨틱 웹\n 웹에 존재하는 수많은 웹페이지들에 메타데이터를 부여하여, 기존의 단순한 데이터 집합이었던 웹페이지를 \u0026lsquo;의미\u0026rsquo;와 \u0026lsquo;관련성\u0026rsquo;을 가지는 거대한 데이터베이스로 구축하고자 하는 발상.   참고 문헌 https://developer.mozilla.org/ko/docs/Learn/HTML/Introduction_to_HTML/Getting_started\nhttps://developer.mozilla.org/ko/docs/Web/HTML/Global_attributes\nhttps://developer.mozilla.org/ko/docs/Glossary/Semantics\n","date":"2021-03-26T00:00:00Z","image":"https://ssabum.github.io/p/html%EA%B8%B0%EC%B4%88/html_hu5ae5770cb34043b5079993437294d24c_21751_120x120_fill_box_smart1_2.png","permalink":"https://ssabum.github.io/p/html%EA%B8%B0%EC%B4%88/","title":"HTML기초"},{"content":"Object-Oriented Programming의 약자로 객체지향프로그래밍이다.\n쉽게 말해 주어 동사 형태로 프로그래밍하는 것!\n1. 절차 지향 프로그래밍 물이 위에서 아래로 흐르듯 순차적인 처리가 중요합니다. 프로그램 전체가 유기적으로 연결되도록 만드는 프로그래밍 기법입니다.\n2. 객체 지향 프로그래밍 실제 세계를 모델링해 소프트웨어를 개발하는 방법입니다. 객체지향 프로그래밍에서는 데이터와 절차를 하나의 덩어리로 묶어서 생각합니다. 마치 컴퓨터 부품을 하나씩 구매해 컴퓨터를 조립하는 것과 같은 방식입니다.\n\r\n","date":"2021-03-26T00:00:00Z","image":"https://ssabum.github.io/p/oop/oop_hu77071c61b22f59609cf235d78dd545c9_23490_120x120_fill_q75_box_smart1.jpg","permalink":"https://ssabum.github.io/p/oop/","title":"OOP"},{"content":"SQLD란 무엇일까?\n한국데이터산업진흥원에서 주관하는 시험으로, Structured Query Language Developer의 줄임말로 데이터베이스 SQL국가공인 자격증이다😎\n저번주 올해 첫 시험인 03.20(토) 시험을 접수했고 앞으로 3주 가량 남은 상황, 오늘부터 SQLD 공부를 시작한다!!\n","date":"2021-03-26T00:00:00Z","image":"https://ssabum.github.io/p/sqld/sql_hubbf8a9fc18cf0c0587203e8c4fcd3fa5_78275_120x120_fill_box_smart1_2.png","permalink":"https://ssabum.github.io/p/sqld/","title":"SQLD"},{"content":"국내 IT기업 기술 블로그 1) Naver D2\n· 국내 최대 포털사이트 네이버의 기술블로그 Naver D2입니다. NAVER 개발자들이 직접 정리한 실전 개발 경험과 지식, 주요 개발자 행사 소식과 후기를 업로드합니다.\n2) kakao Tech\n· 카카오의 기술 블로그로, 카카오 서비스를 만드는 개발자들의 실제 개발 사례를 중심으로 기술과 노하우를 전달합니다. 이벤트와 오픈소스, 채용 정보도 확인할 수 있습니다.\n3) 쿠팡 기술블로그\n· 국내 온라인 쇼핑 사이트 쿠팡의 기술블로그입니다. 쿠팡 글로벌 개발팀이 쿠팡을 만들고 진화시키면서 배운 점과 얻은 교훈을 비롯해 다양한 테크 관련 이야기를 전달합니다.\n4) WATCHA 팀 블로그\n· 국내 OTT 서비스의 대표 주자 왓챠의 팀 블로그입니다. 개발, 테크, 기술이 가장 메인 주제입니다. 종종 왓챠팀의 문화, 브랜딩 소식을 올리기도 합니다.\n5) 당근마켓 기술 블로그\n· 2020년 6월 누적 2천만 다운로드, 월 순 방문자수 800만 명을 돌파한 중고거래 앱 서비스 당근마켓의 팀 블로그입니다. 개발, 테크 관련 콘텐츠가 주를 이룹니다.\n6) 우아한형제들 기술 블로그\n· 국내 대표 푸드 테크 서비스 배달의민족을 운영하는 우아한형제들의 기술 블로그입니다. 우아한 형제들의 대표적 개발자 양성 프로그램인 우아한 테크코스의 후기 포스팅이 올라오기도 합니다.\n7) LINE Engineering\n· 글로벌 메신저 서비스 LINE이 운영하는 기술 블로그입니다. 블로그 포스팅과 더불어 오픈소스와 채용정보도 확인하실 수 있습니다.\n8) 마켓컬리 Tech Blog\n· 코로나19 사태로 인해 최근 가장 주목 받는 기업 중 하나가 된 푸드 테크 기업 마켓컬리의 기술 블로그입니다.\n9) 뱅크샐러드 기술 블로그\n· 금융플랫폼 서비스 뱅크샐러드의 공식 블로그입니다. 기술, 개발, 테크 관련 콘텐츠가 주를 이루고 있습니다.\n10) NHN 기술블로그 TOAST Meetup!\n· 종합 IT 기업 NHN의 기술 블로그입니다. 블로그 메인화면에서 기술을 공유하고 함께 성장해가는 개발 문화를 추구한다고 밝히고 있습니다.\n11) 강남언니 공식 블로그\n· 미용 의료 분야의 Tech 기업 강남언니의 공식 블로그입니다. 기술, 테크 주제의 콘텐츠와 함께 브랜드, 조직문화에 대해서도 공유합니다.\n12) Delivery Tech Korea\n· 푸드 테크 기업 딜리버리코리아의 기술 블로그입니다. 요기요\u0026amp;배달통 서비스 개발 및 협업 방식과 문화에 대한 포스팅을 업로드합니다.\n13) HYPER CONNECT 기술 블로그\n· 실시간 영상채팅 서비스 아자르(Azar)를 제작한 비디오 및 인공지능 기술 기반의 영상 기술 기업 하이퍼커넥트의 기술 블로그입니다.\n14) Spoqa 기술 블로그\n· 매장 마케팅 솔루션 도도 포인트를 서비스하는 스포카의 기술 블로그입니다. 블로그 소개에서 건강한 오픈소스 커뮤니티 형성을 위해 배우고 개선한 것들을 오픈소스로 공개한다고 말합니다.\n15) 쏘카 기술블로그\n· 그린카와 더불어 국내 대표 카셰어링 서비스 쏘카의 기술 블로그입니다.\n16) 리디 Tech blog\n· 리디북스를 비롯해, 리디셀렉트, 리디페이퍼, 아웃스탠딩 등의 콘텐츠 플랫폼 서비스를 제공하는 리디코퍼레이션의 기술 블로그입니다.\n17) 이스트소프트 AI PLUS TECH\n· 알집, 알약으로 익숙한 이스트소프트의 기술 블로그입니다. 주로 AI 주제의 콘텐츠를 포스팅합니다.\n18) 플랫팜 팀 블로그\n· 이모티콘 콘텐츠 플랫폼이자 메신저 기업을 대상으로 하는 B2B 솔루션 Mojitok을 서비스하는 플랫팜의 팀 블로그입니다.\n19) 레진 기술 블로그\n· 웹툰 서비스인 레진코믹스를 제작하는 레진엔터테인먼트가 운영하는 기술 블로그입니다.\n20) 플라네타리움 엔지니어링 스낵\n· 게임에 특화된 오픈 소스 P2P 라이브러리 Libplanet과, 중앙 서버 없는 온라인 게임 나인 크로니클을 제작하는 테크 기업, 플라네타리움의 기술 블로그입니다.\n국내 기술 콘텐츠 플랫폼 1) Velog\n· 개인 기술 블로그와 최신 콘텐츠를 찾을 수 있는, 기술 블로그 콘텐츠 큐레이션 플랫폼입니다.\n2) GeekNews\n· 개발, 기술, IT 소식, 스타트업 등을 전하는 뉴스 큐레이션 플랫폼입니다. 해외 기술 동향과 관련된 소식을 확인하실 수 있습니다.\n3) 개발자스럽다\n· 개발자를 위한 주요 소식과 뉴스레터를 공유하는 사이트입니다.\n4) 44BITS\n· 당근마켓 개발자를 비롯해, 총 5명의 개발자가 프로그래밍과 클라우드를 주요 주제로 운영하는 기술 블로그입니다.\n5) 프로그래머스\n· 기술 중심 개발자 채용 플랫폼입니다. 기술 블로그는 아니지만 개발, IT 직군의 주요 채용 공고를 확인하실 수 있습니다.\n해외 IT 기업 기술 블로그 1) Facebook Engineering\n· 세계 최대 소셜 미디어 페이스북의 기술 블로그입니다. 인스타그램도 검색하면 기술 블로그는 나오지만 2019년 이후로 업데이트가 되지 않고 있습니다.\n2) Amazon Alexa\n· 세계 최대 이커머스 플랫폼 아마존의 기술 블로그입니다. Alexa는 아마존이 개발한 인공지능 플랫폼의 이름입니다.\n3) Apple Developer\n· 앱스토어 내 앱 제작 등 애플 관련 서비스를 사용해야 하는 개발자들을 위해 만들어진 애플의 기술 블로그입니다. 애플 관련 주요 소식을 전달하는 뉴스룸에 더 가깝습니다.\n4) THE NETFLIX TECH BLOG\n· 세계적인 동영상 스트리밍 서비스 기업 넷플릭스의 기술 블로그입니다.\n5) Google Devlopers\n· 세계 최대 테크 기업 구글의 기술 블로그입니다. 구글과 관련한 기술, 뉴스, 업데이트 내용을 주로 다룹니다.\n6) Microsoft Tech Community\n· 세계 최대 소프트웨어 기업 마이크로소프트도 기술 블로그를 운영하고 있습니다. 개발자들끼리 궁금한 점을 묻고 답할 수 있는 테크 커뮤니티도 잘 형성되어 있습니다.\n7) Linkedin Engineering\n· 채용 중심의 소셜 미디어 링크드인의 기술 블로그입니다.\n8) Slack Engineering\n· 세계 대 협업 메신저인 슬랙의 기술 블로그입니다.\n9) Spotify Engineering\n· 머지 않은 미래에 한국 출시가 예상되는, 음원 스트리밍 플랫폼 스포티파이의 기술 블로그입니다.\n10) PayPal Engineering Blog\n· 미국의 간편 결제 서비스 페이팔의 기술 블로그입니다.\n11) ebay Tech Blog\n· 국내에서는 G마켓, 옥션, G9를 서비스 중인 세계적인 오픈마켓 이베이의 기술 블로그입니다.\n12) Twitter Engineering\n· 페이스북과 더불어 대표적 소셜 미디어 중 하나인 트위터의 기술 블로그입니다.\n13) RIOT GAMES TECHBLOG\n· 롤이라는 이름으로 널리 알려진 인기 게임, 리그 오브 레전드를 서비스하는 라이엇 게임즈의 기술 블로그입니다.\n14) Figma Blog Engineering\n· 스케치의 뒤를 이어 최근 많은 주목을 받고 있는 웹/앱 디자인 협업툴 피그마의 기술 블로그입니다.\n15) Airbnb Engineering \u0026amp; Data Science\n· 숙박 공유 플랫폼 에어비앤비의 기술 블로그입니다. 블로그 이름에서 알 수 있든 데이터 사이언스 관련 포스팅이 많습니다.\n16) Zoom Developer Blog\n· 코로나19 사태의 수혜를 받은 대표적 기업, 화상회의 플랫폼 줌의 기술 블로그입니다.\n17) Pinterest Engineering\n· 디자이너와 그림에 관심 있는 분들의 필수 사이트, 핀터레스트의 기술 블로그입니다.\n18) Uber Engineering\n· 차량 공유 서비스 (Rider Sharing) 우버의 기술 블로그입니다.\n19) Google Play Apps \u0026amp; Games\n· 구글 플레이 관련 기술적 팁, 트렌드, 지식을 제공하는 구글 플레이 기술 블로그입니다.\n20) Drpbox Tech\n· 웹 기반 파일 공유 서비스 드롭박스의 기술 블로그입니다.\n","date":"2021-03-26T00:00:00Z","image":"https://ssabum.github.io/p/%EA%B8%B0%EC%88%A0%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%86%8C%EA%B0%9C/tech_hu9335188f5464ae1366b02b4610e0ffc3_286791_120x120_fill_q75_box_smart1.jpg","permalink":"https://ssabum.github.io/p/%EA%B8%B0%EC%88%A0%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%86%8C%EA%B0%9C/","title":"기술블로그 소개"},{"content":"Algorithm기본 이론에 대해 알아보자\nBig-Oh Notation 시간 복잡도 함수 중에서 가장 큰 영향력을 주는 n에 대한 항만을 표시\n\r\n배열 일정한 자료형의 변수들을 하나의 이름으로 열거하여 사요하는 자료구조\n완전검색(Brute-force) 완전 검색 방법은 문제의 해법으로 생각할 수 있는 모든 경우의 수를 나열해보고 확인하는 기법\n정렬 알고리즘 학습한 정렬 알고리즘의 특성\n\r\n너비우선탐색(BFS) 👉 큐(queue) 매 단계에서 가능한 경우의 수들을 모두 확인하면서 탐색, 트리를 넓히면서 탐색하는 알고리즘\n\r\n깊이우선탐색(DFS) 👉 스택(stack) 여러 경우의 수 중 하나를 선택, 선택 후 가능한 여러 경우의 수 중 하나를 선택\n매 단계에서 가능한 것 중 일단 하나를 선택해 끝을 볼 때까지 확인\n\r\n스택(Stack) 자료를 차곡차곡 쌓는 것\nLast In First Out 👉 후입선출\n\r\n큐(Queue) 줄을 서서 기다리는 것\nFirst In First Out 👉 선입선출\n\r\n구현 순차 DFS - 깊이우선탐색 \r\n\r\n  루트 노드 (시작점) 인 A 를 스택에 넣습니다.\n  A 를 Pop 하면서 Expand 합니다. 즉, A 는 지우고 A 의 자식인 B, C, D 를 스택에 넣습니다.\n  스택의 맨 위에 있는 B 를 Pop and Expand 합니다. 즉, B 는 지우고 B 의 자식인 E 를 스택에 넣습니다.\n  스택의 맨 위에 있는 E 를 Pop and Expand 합니다. 즉, E 는 지우고 E 의 자식인 I, J 를 스택에 넣습니다.\n  스택의 맨 위에 있는 I 를 Pop and Expand 합니다. 이 때, I 는 자식이 없으므로 (끝에 도달했으므로) 스택에 넣을 것이 없습니다.\n  스택의 맨 위에 있는 J 를 Pop and Expand 합니다. 이 때, J 또한 자식이 없으므로 스택에 넣을 것이 없습니다.\n  스택의 맨 위에 있는 C 를 Pop and Expand 합니다. 즉, C 는 지우고 C 의 자식인 F 를 스택에 넣습니다.\n  스택의 맨 위에 있는 F 를 Pop and Expand 합니다. 이 때, F 는 자식이 없으므로 스택에 넣을 것이 없습니다.\n  스택 맨 위에 있는 D 를 Pop and Expand 합니다. 즉, D 는 지우고 D 의 자식인 H, K 를 스택에 넣습니다.\n  스택의 맨 위에 있는 G 를 Pop and Expand 합니다. 이 때, G 는 자식이 없으므로 스택에 넣을 것이 없습니다.\n  스택의 맨 위에 있는 H 를 Pop and Expand 합니다. 이 때, H 는 자식이 없으므로 스택에 넣을 것이 없습니다.\n  스택의 맨 위에 있는 K 를 Pop and Expand 합니다. 이 때, K 는 자식이 없으므로 스택에 넣을 것이 없습니다.\n  스택이 비었습니다. 이 말은 모든 노드를 탐색했다는 뜻이죠!\n  BFS - 너비우선탐색 \r\n\r\n  루트 노드 (시작점) 인 A 를 큐에 넣습니다.\n  A를 Dequeue 하면서 Expand 합니다. 즉, A 는 지우고 A 의 바로 다음 자식인 B, C, D를 큐의 오른쪽에 넣습니다.\n  큐의 맨 왼쪽에 있는 B 를 Dequeue and Expand 합니다. 즉, B 는 지우고 B 의 바로 다음 자식인 E 만 큐에 넣습니다.\n  큐의 맨 왼쪽에 있는 C 를 Dequeue and Expand 합니다. 즉, C 는 지우고 C 의 바로 다음 자식인 F 를 큐에 넣습니다.\n  큐의 맨 왼쪽에 있는 D 를 Dequeue and Expand 합니다. 즉, D 는 지우고 C 의 바로 다음 자식인 G, H 를 큐에 넣습니다.\n  큐의 맨 왼쪽에 있는 E 를 Dequeue and Expand 합니다. 즉, E 는 지우고 E 의 바로 다음 자식인 I, J 를 큐에 넣습니다.\n  큐의 맨 왼쪽에 있는 F 를 Dequeue and Expand 합니다. 이 때, F 는 자식이 없으므로 큐에 넣을 것이 없습니다.\n  큐의 맨 왼쪽에 있는 G 를 Dequeue and Expand 합니다. 이 때, G 는 자식이 없으므로 큐에 넣을 것이 없습니다.\n  큐의 맨 왼쪽에 있는 H 를 Dequeue and Expand 합니다. 즉, H 는 지우고 H 의 바로 다음 자식인 K 를 큐에 넣습니다.\n  큐의 맨 왼쪽에 있는 I 를 Dequeue and Expand 합니다. 이 때, I 는 자식이 없으므로 큐에 넣을 것이 없습니다.\n  큐의 맨 왼쪽에 있는 J 를 Dequeue and Expand 합니다. 이 때, J 는 자식이 없으므로 큐에 넣을 것이 없습니다.\n  큐의 맨 왼쪽에 있는 K 를 Dequeue and Expand 합니다. 이 때, K 는 자식이 없으므로 큐에 넣을 것이 없습니다.\n  큐가 비었습니다. 모든 노드를 탐색했다는 뜻이죠!\n ","date":"2021-03-26T00:00:00Z","image":"https://ssabum.github.io/p/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B8%B0%EC%B4%88%EC%9D%B4%EB%A1%A0/algorithm_hue59cc96f39be3bdd739f8972409a29e2_15547_120x120_fill_box_smart1_2.png","permalink":"https://ssabum.github.io/p/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B8%B0%EC%B4%88%EC%9D%B4%EB%A1%A0/","title":"알고리즘 기초이론"}]